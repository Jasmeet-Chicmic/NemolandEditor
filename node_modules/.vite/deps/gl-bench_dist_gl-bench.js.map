{
  "version": 3,
  "sources": ["../../gl-bench/dist/gl-bench.js"],
  "sourcesContent": ["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.GLBench = factory());\n}(this, (function () { 'use strict';\n\n  var UISVG = \"<div class=\\\"gl-box\\\">\\n  <svg viewBox=\\\"0 0 55 60\\\">\\n    <text x=\\\"27\\\" y=\\\"56\\\" class=\\\"gl-fps\\\">00 FPS</text>\\n    <text x=\\\"28\\\" y=\\\"8\\\" class=\\\"gl-mem\\\"></text>\\n    <rect x=\\\"0\\\" y=\\\"14\\\" rx=\\\"4\\\" ry=\\\"4\\\" width=\\\"55\\\" height=\\\"32\\\"></rect>\\n    <polyline class=\\\"gl-chart\\\"></polyline>\\n  </svg>\\n  <svg viewBox=\\\"0 0 14 60\\\" class=\\\"gl-cpu-svg\\\">\\n    <line x1=\\\"7\\\" y1=\\\"38\\\" x2=\\\"7\\\" y2=\\\"11\\\" class=\\\"opacity\\\"/>\\n    <line x1=\\\"7\\\" y1=\\\"38\\\" x2=\\\"7\\\" y2=\\\"11\\\" class=\\\"gl-cpu\\\" stroke-dasharray=\\\"0 27\\\"/>\\n    <path d=\\\"M5.35 43c-.464 0-.812.377-.812.812v1.16c-.783.1972-1.421.812-1.595 1.624h-1.16c-.435 0-.812.348-.812.812s.348.812.812.812h1.102v1.653H1.812c-.464 0-.812.377-.812.812 0 .464.377.812.812.812h1.131c.1943.783.812 1.392 1.595 1.595v1.131c0 .464.377.812.812.812.464 0 .812-.377.812-.812V53.15h1.653v1.073c0 .464.377.812.812.812.464 0 .812-.377.812-.812v-1.131c.783-.1943 1.392-.812 1.595-1.595h1.131c.464 0 .812-.377.812-.812 0-.464-.377-.812-.812-.812h-1.073V48.22h1.102c.435 0 .812-.348.812-.812s-.348-.812-.812-.812h-1.16c-.1885-.783-.812-1.421-1.595-1.624v-1.131c0-.464-.377-.812-.812-.812-.464 0-.812.377-.812.812v1.073H6.162v-1.073c0-.464-.377-.812-.812-.812zm.58 3.48h2.088c.754 0 1.363.609 1.363 1.363v2.088c0 .754-.609 1.363-1.363 1.363H5.93c-.754 0-1.363-.609-1.363-1.363v-2.088c0-.754.609-1.363 1.363-1.363z\\\"/>\\n  </svg>\\n  <svg viewBox=\\\"0 0 14 60\\\" class=\\\"gl-gpu-svg\\\">\\n    <line x1=\\\"7\\\" y1=\\\"38\\\" x2=\\\"7\\\" y2=\\\"11\\\" class=\\\"opacity\\\"/>\\n    <line x1=\\\"7\\\" y1=\\\"38\\\" x2=\\\"7\\\" y2=\\\"11\\\" class=\\\"gl-gpu\\\" stroke-dasharray=\\\"0 27\\\"/>\\n    <path d=\\\"M1.94775 43.3772a.736.736 0 10-.00416 1.472c.58535.00231.56465.1288.6348.3197.07015.18975.04933.43585.04933.43585l-.00653.05405v8.671a.736.736 0 101.472 0v-1.4145c.253.09522.52785.1495.81765.1495h5.267c1.2535 0 2.254-.9752 2.254-2.185v-3.105c0-1.2075-1.00625-2.185-2.254-2.185h-5.267c-.28865 0-.5635.05405-.8165.1495.01806-.16445.04209-.598-.1357-1.0787-.22425-.6072-.9499-1.2765-2.0125-1.2765zm2.9095 3.6455c.42435 0 .7659.36225.7659.8119v2.9785c0 .44965-.34155.8119-.7659.8119s-.7659-.36225-.7659-.8119v-2.9785c0-.44965.34155-.8119.7659-.8119zm4.117 0a2.3 2.3 0 012.3 2.3 2.3 2.3 0 01-2.3 2.3 2.3 2.3 0 01-2.3-2.3 2.3 2.3 0 012.3-2.3z\\\"/>\\n  </svg>\\n</div>\";\n\n  var UICSS = \"#gl-bench {\\n  position:absolute;\\n  left:0;\\n  top:0;\\n  z-index:1000;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  user-select: none;\\n}\\n\\n#gl-bench div {\\n  position: relative;\\n  display: block;\\n  margin: 4px;\\n  padding: 0 7px 0 10px;\\n  background: #6c6;\\n  border-radius: 15px;\\n  cursor: pointer;\\n  opacity: 0.9;\\n}\\n\\n#gl-bench svg {\\n  height: 60px;\\n  margin: 0 -1px;\\n}\\n\\n#gl-bench text {\\n  font-size: 12px;\\n  font-family: Helvetica,Arial,sans-serif;\\n  font-weight: 700;\\n  dominant-baseline: middle;\\n  text-anchor: middle;\\n}\\n\\n#gl-bench .gl-mem {\\n  font-size: 9px;\\n}\\n\\n#gl-bench line {\\n  stroke-width: 5;\\n  stroke: #112211;\\n  stroke-linecap: round;\\n}\\n\\n#gl-bench polyline {\\n  fill: none;\\n  stroke: #112211;\\n  stroke-linecap: round;\\n  stroke-linejoin: round;\\n  stroke-width: 3.5;\\n}\\n\\n#gl-bench rect {\\n  fill: #448844;\\n}\\n\\n#gl-bench .opacity {\\n  stroke: #448844;\\n}\\n\";\n\n  class GLBench {\n\n    /** GLBench constructor\n     * @param { WebGLRenderingContext | WebGL2RenderingContext } gl context\n     * @param { Object | undefined } settings additional settings\n     */\n    constructor(gl, settings = {}) {\n      this.css = UICSS;\n      this.svg = UISVG;\n      this.paramLogger = () => {};\n      this.chartLogger = () => {};\n      this.chartLen = 20;\n      this.chartHz = 20;\n\n      this.names = [];\n      this.cpuAccums = [];\n      this.gpuAccums = [];  \n      this.activeAccums = [];\n      this.chart = new Array(this.chartLen);\n      this.now = () => (performance && performance.now) ? performance.now() : Date.now();\n      this.updateUI = () => {\n        [].forEach.call(this.nodes['gl-gpu-svg'], node => {\n          node.style.display = this.trackGPU ? 'inline' : 'none';\n        });\n      };\n\n      Object.assign(this, settings);\n      this.detected = 0;\n      this.finished = [];\n      this.isFramebuffer = 0;\n      this.frameId = 0;\n\n      // 120hz device detection\n      let rafId, n = 0, t0;\n      let loop = (t) => {\n        if (++n < 20) {\n          rafId = requestAnimationFrame(loop);\n        } else {\n          this.detected = Math.ceil(1e3 * n / (t - t0) / 70);\n          cancelAnimationFrame(rafId);\n        }\n        if (!t0) t0 = t;\n      };\n      requestAnimationFrame(loop);\n\n      // attach gpu profilers\n      if (gl) {\n        const glFinish = async (t, activeAccums) =>\n          Promise.resolve(setTimeout(() => {\n            gl.getError();\n            const dt = this.now() - t;\n            activeAccums.forEach((active, i) => {\n              if (active) this.gpuAccums[i] += dt;\n            });\n          }, 0));\n\n        const addProfiler = (fn, self, target) => function() {\n          const t = self.now();\n          fn.apply(target, arguments);\n          if (self.trackGPU) self.finished.push(glFinish(t, self.activeAccums.slice(0)));\n        };\n\n        ['drawArrays', 'drawElements', 'drawArraysInstanced',\n          'drawBuffers', 'drawElementsInstanced', 'drawRangeElements']\n          .forEach(fn => { if (gl[fn]) gl[fn] = addProfiler(gl[fn], this, gl); });\n\n        gl.getExtension = ((fn, self) => function() {\n          let ext = fn.apply(gl, arguments);\n          if (ext) {\n            ['drawElementsInstancedANGLE', 'drawBuffersWEBGL']\n              .forEach(fn => { if (ext[fn]) ext[fn] = addProfiler(ext[fn], self, ext); });\n          }\n          return ext;\n        })(gl.getExtension, this);\n      }\n\n      // init ui and ui loggers\n      if (!this.withoutUI) {\n        if (!this.dom) this.dom = document.body;\n        let elm = document.createElement('div');\n        elm.id = 'gl-bench';\n        this.dom.appendChild(elm);\n        this.dom.insertAdjacentHTML('afterbegin', '<style id=\"gl-bench-style\">' + this.css + '</style>');\n        this.dom = elm;\n        this.dom.addEventListener('click', () => {\n          this.trackGPU = !this.trackGPU;\n          this.updateUI();\n        });\n\n        this.paramLogger = ((logger, dom, names) => {\n          const classes = ['gl-cpu', 'gl-gpu', 'gl-mem', 'gl-fps', 'gl-gpu-svg', 'gl-chart'];\n          const nodes = Object.assign({}, classes);\n          classes.forEach(c => nodes[c] = dom.getElementsByClassName(c));\n          this.nodes = nodes;\n          return (i, cpu, gpu, mem, fps, totalTime, frameId) => {\n            nodes['gl-cpu'][i].style.strokeDasharray = (cpu * 0.27).toFixed(0) + ' 100';\n            nodes['gl-gpu'][i].style.strokeDasharray = (gpu * 0.27).toFixed(0) + ' 100';\n            nodes['gl-mem'][i].innerHTML = names[i] ? names[i] : (mem ? 'mem: ' + mem.toFixed(0) + 'mb' : '');\n            nodes['gl-fps'][i].innerHTML = fps.toFixed(0) + ' FPS';\n            logger(names[i], cpu, gpu, mem, fps, totalTime, frameId);\n          }\n        })(this.paramLogger, this.dom, this.names);\n\n        this.chartLogger = ((logger, dom) => {\n          let nodes = { 'gl-chart': dom.getElementsByClassName('gl-chart') };\n          return (i, chart, circularId) => {\n            let points = '';\n            let len = chart.length;\n            for (let i = 0; i < len; i++) {\n              let id = (circularId + i + 1) % len;\n              if (chart[id] != undefined) {\n                points = points + ' ' + (55 * i / (len - 1)).toFixed(1) + ','\n                  + (45 - chart[id] * 22 / 60 / this.detected).toFixed(1);\n              }\n            }\n            nodes['gl-chart'][i].setAttribute('points', points);\n            logger(this.names[i], chart, circularId);\n          }\n        })(this.chartLogger, this.dom);\n      }\n    }\n\n    /**\n     * Explicit UI add\n     * @param { string | undefined } name \n     */\n    addUI(name) {\n      if (this.names.indexOf(name) == -1) {\n        this.names.push(name);\n        if (this.dom) {\n          this.dom.insertAdjacentHTML('beforeend', this.svg);\n          this.updateUI();\n        }\n        this.cpuAccums.push(0);\n        this.gpuAccums.push(0);\n        this.activeAccums.push(false);\n      }\n    }\n\n    /**\n     * Increase frameID\n     * @param { number | undefined } now\n     */\n    nextFrame(now) {\n      this.frameId++;\n      const t = now ? now : this.now();\n\n      // params\n      if (this.frameId <= 1) {\n        this.paramFrame = this.frameId;\n        this.paramTime = t;\n      } else {\n        let duration = t - this.paramTime;\n        if (duration >= 1e3) {\n          const frameCount = this.frameId - this.paramFrame;\n          const fps = frameCount / duration * 1e3;\n          for (let i = 0; i < this.names.length; i++) {\n            const cpu = this.cpuAccums[i] / duration * 100,\n              gpu = this.gpuAccums[i] / duration * 100,\n              mem = (performance && performance.memory) ? performance.memory.usedJSHeapSize / (1 << 20) : 0;\n            this.paramLogger(i, cpu, gpu, mem, fps, duration, frameCount);\n            this.cpuAccums[i] = 0;\n            Promise.all(this.finished).then(() => {\n              this.gpuAccums[i] = 0;\n              this.finished = [];\n            });\n          }\n          this.paramFrame = this.frameId;\n          this.paramTime = t;\n        }\n      }\n\n      // chart\n      if (!this.detected || !this.chartFrame) {\n        this.chartFrame = this.frameId;\n        this.chartTime = t;\n        this.circularId = 0;\n      } else {\n        let timespan = t - this.chartTime;\n        let hz = this.chartHz * timespan / 1e3;\n        while (--hz > 0 && this.detected) {\n          const frameCount = this.frameId - this.chartFrame;\n          const fps = frameCount / timespan * 1e3;\n          this.chart[this.circularId % this.chartLen] = fps;\n          for (let i = 0; i < this.names.length; i++) {\n            this.chartLogger(i, this.chart, this.circularId);\n          }\n          this.circularId++;\n          this.chartFrame = this.frameId;\n          this.chartTime = t;\n        }\n      }\n    }\n\n    /**\n     * Begin named measurement\n     * @param { string | undefined } name\n     */\n    begin(name) {\n      this.updateAccums(name);\n    }\n\n    /**\n     * End named measure\n     * @param { string | undefined } name\n     */\n    end(name) {\n      this.updateAccums(name);\n    }\n\n    updateAccums(name) {\n      let nameId = this.names.indexOf(name);\n      if (nameId == -1) {\n        nameId = this.names.length;\n        this.addUI(name);\n      }\n\n      const t = this.now();\n      const dt = t - this.t0;\n      for (let i = 0; i < nameId + 1; i++) {\n        if (this.activeAccums[i]) {\n          this.cpuAccums[i] += dt;\n        }\n      }    this.activeAccums[nameId] = !this.activeAccums[nameId];\n      this.t0 = t;\n    }\n\n  }\n\n  return GLBench;\n\n})));\n"],
  "mappings": "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",
  "names": ["self", "fn", "i"]
}
